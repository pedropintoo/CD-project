- divisoes, e da + carga em quem é muito rapido.
Optimização da distribuicao de recursos! Começar com carga baixa
- introdução do problema do sudoku
- nó que distribui, também realiza trabalho
- http server - selector

# 5 TODO: herself stats
# TODO: remove # host_port is only for logging!
# TODO: remove  self.logger.critical(f"Discard validations [{baseValueReceived}] from {host_port}.") 
# TODO: kill the node! Also when CTRL-C this must kill the node...
# TODO: must select the client to send the response (for now only one client is supported)



Introdução ao problema do Sudoku
- gen.py - gera um tabuleiro de sudoku e o curl responsavel por fazer o request
- nó recebe o request e gera nos espaços vazios do tabuleiro, os possiveis valores
- neste momento o nó inicial tem vários sudokus possiveis, e tem de mandar os outros nós correrem o check do sudoku.py nesse sudoku.
- os nós que recebem o pedido, correm o check e devolvem o resultado ao nó inicial


Aceitar 2 Sodukus (http deve conseguir distinguir clientes):
- neste momento temos uma apenas uma thread a meter numa queue para pedidos e a seguinte fica locked até a primeira acabar de correr
- temos que ter uma queue por thread de http, isto é, queremos controlar várias threads, queremos fazer pedidos ao mesmo servidor, servidor tem que conseguir distinguir e devolver à thread que me fez o pedido.
- do lado do p2p ele vai ter que conseguir distinguir clientes e devolver a resposta ao cliente que fez o pedido. 
- Provavelmente será necessário termos um broker, uma classe para fazer esta gestão. Este broker seria responsável de receber os pedidos e distingui-los. Não queremos aumentar a complexidade do lado do nosso servidor. Queremos colocar a complexidade do lado do broker. Em vez de termos uma dependência de N threads http para o nosso servidor, elas contactam o broker e o broker contacta o servidor. 


Broker:
- Quais seriam as estruturas envolvidas no nosso broker?
- No broker vai ter que existir uma queue por thread, para que o broker consiga distinguir os pedidos.
- Provavelmente uma queue de saída.
 




Classes envolvidas:
- http_server.py:
- 

